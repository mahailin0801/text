
一、js的垃圾回收机制

	WHY：   JavaScript程序每次创建字符串、数组或对象时，解释器都必须分配内存来存储那个实体。

		只要像这样动态地分配了内存，最终都要释放这些内存以便他们能够被再用JavaScript的解释器将会
	
		消耗完系统中所有可用的内存，造成系统崩溃。

1）最常见的清理方式：标记清除
	
	工作原理：

		*1）是当变量进入环境时，将这个变量标记为“进入环境”

		*2）当变量离开环境时，则将其标记为“离开环境”。

		*3）标记“离开环境”的就回收内存。

2）其他方法就是 ：引用计数

	工作原理：
	
		*1）申明一个变量，然后被引用，引用次数就是1，

		*2）同一个值又被赋值给另一个变量，这个引用类型值的引用次数加1.

		*3）包含此变量被赋值之后，引用次数减 1

		*4）当引用次数变为0 的时候，此值失效，下次回收机制执行就会清除

3）内存泄漏的原因

	*1）意外的全局变量            *2）闭包引起

	*3）没有清理的DOM元素引起     *4）被遗忘的定时器或者回调

	*5）子元素存在引用导致



二、闭包，面向对象， 继承的理解

闭包：

1） 含义：能够读取其他函数内部变量的函数

2） 目的：设计私有的变量和方法

3） 优点：避免全局变量的污染   缺点：常驻内存，增大使用量

4） 闭包的三大特性 

	*1） 函数嵌套函数

	*2） 函数内部可以引用外部的变量和参数 

	*3） 参数和变量不会被垃圾回收机制回收


面对对象：

	面向对象编程，就是OOP，一种编程范式， 满足面向对象编程的语言，一般
	
	会提供类、封装、继承等辅助进行编程


继承：子类继承父类所有的属性和功能

1）通过改变父类的执行环境
	
	function father（）{}
	
	function son（）{

		this.parent = father;
		this.parent();

	}
2)通过call 或者apply 继承

	function father（）{}

	function son（）{

		father.call(this,...);    call的第二个参数不固定
		father.apply(this,...);	  apply的第二个参数是一个数组，可用argument来代替

	}

    以上两种都只能继承私有属性，公有属性无法继承

3）原型继承  （公有的和私有的都可以继承）

	function Father（）{}
	
	function son（）{
		
		son.prototype = new Father();
	}

     但是父类实例属性值不固定时，子类继承无法更改值，故采用混合继承

4）混合继承  

	function father（）{}
	
	function son（）{
		
		father.call(this,...);   通过call 或者apply 继承实例属性和方法

		son.prototype = new Father(); 通过原型，继承原型方法
	}

5）es6 构造函数的继承

	class Animal{
		constructor（）{
			this.name = name；
			this.age = age;
		}
	}

	class Son extends Father{
		constructor（）{
			super(name,age)
		}

	}


三、 Html 和 XHTML的区别

	html 是一种基本的web 网页设计语言，  XHTML 是一个基于xml 的置标语言

最主要区别：XHTML 必须被正确嵌套，元素必须关闭，标签必须小写，必须有根元素

而 xml 是可扩展的标记语言，其中标签都不是w3c规定的，而是依据自己需求扩展的，一般用于存数据


四、 如何优化页面，加快页面加载速度  

1）优化图片资源的格式和大小

2）开启网络压缩

3）使用浏览器缓存

4）减少重定向请求

5）使用CDN 存储静态资源

6）减少DNS的查询次数

7）压缩 css 和 js 的内容


五、移动布局自适应的几种方式

1）响应式布局

2）100%布局，弹性布局  （以百分比作为基本单位）

3）等比缩放布局（rem）

4）混合布局


响应式布局：实现不同屏幕分辨率上的页面展示效果

*1）设置meta 标签

*2）根据媒体查询设置样式

*3）设置多种视图宽度

*4）注意：宽度 使用百分比   处理图片缩放问题


六.移动端常见的适配不同屏幕大小的方法


1）响应式布局  页面元素随着屏幕的大小不同而改变 通常以百分比来进行定位

2) Cover 布局   保持页面宽高比，取宽或者高中较小者占满屏幕，超出内容被隐藏  

	主要适用于内容集中在中部，边沿无重要内容的设计

3）Contain 布局  取宽或高之中较大者占满屏幕，不足的部分用背景色填充， 背景色为单色，或者可平铺的



	































	



